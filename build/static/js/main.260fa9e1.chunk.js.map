{"version":3,"sources":["quoteForm.js","ResultQuote.js","api.js","App.js","serviceWorker.js","index.js"],"names":["regex","email","phone","firstName","lastName","amount","QuoteForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","name","errorField","isRequired","e","_this$setState","inValid","test","target","value","undefined","setState","defineProperty","onSubmit","event","preventDefault","state","fromCurrency","toCurrency","payload","concat","code","isSameCurrency","onSelectCode","amountError","invalidPhone","currencies","react_default","a","createElement","Form","className","Row","Group","as","Col","controlId","Label","Control","required","type","autoComplete","placeholder","maxLength","isInvalid","firstNameError","onChange","lastNameError","invalidEmail","InputGroup","DropdownButton","Prepend","variant","title","id","jsonPhone","map","option","Dropdown","Item","key","onClick","FormControl","aria-describedby","invalidToCurrency","entries","size","Button","Component","ResultQuote","params","quote","Fragment","CustomerRate","Amount","text","currencyCode","fromCurrencyCode","currencyAmount","CustomerAmount","toCurrencyCode","ComparisonAmount","getNewQuote","headers","content-type","getData","_callee","url","newHeaders","method","_args","arguments","regenerator_default","wrap","_context","prev","next","length","Promise","resolve","reject","fetch","then","data","ok","json","catch","error","console","log","abrupt","sent","stop","RESULT","App","resetState","status","quoteDetail","objectSpread","_this2","quoteForm_QuoteForm","phoneCode","setSelectedCurrency","reset","toReset","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.260fa9e1.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport * as jsonPhone from './mockPhoneCode.json';\r\nimport {Form,Button,Col,InputGroup,FormControl,Dropdown,DropdownButton } from 'react-bootstrap';\r\n\r\nconst regex = {\r\n  email:/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/,\r\n  phone:/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/,\r\n  firstName:/^[a-zA-Z]+$/,\r\n  lastName:/^[a-zA-Z]+$/,\r\n  amount:/^[-+]?\\d+(\\.\\d\\d?)?$/\r\n}\r\n\r\nexport default class QuoteForm extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      email:'',\r\n      code:'+61',\r\n      fromCurrency:'AUD',\r\n      toCurrency:'USD',\r\n      firstName:'',\r\n      lastName:'',\r\n      phone:'',\r\n      amount:'',\r\n      amountError:'',\r\n      invalidPhone:'',\r\n    }\r\n  }\r\n\r\n  handleChange = (name, errorField,isRequired) => e =>{\r\n    let inValid=true;\r\n    if(regex[name] && regex[name].test(e.target.value)){\r\n      inValid=false;\r\n    }\r\n    if(isRequired === undefined && !e.target.value || !errorField){\r\n      inValid=false;\r\n    }\r\n    this.setState({[name]:e.target.value,[errorField]:inValid,isSameCurrency:false})\r\n  }\r\n\r\n  onSubmit = event =>{\r\n    \r\n    event.preventDefault();\r\n\r\n    if(this.state.fromCurrency===this.state.toCurrency)\r\n    {\r\n      this.setState({\r\n        isSameCurrency:true\r\n      })\r\n      return;\r\n    }\r\n    const payload = {\r\n      name:`${this.state.firstName} ${this.state.lastName}`,\r\n      email:this.state.email,\r\n      phone:`${this.state.code}${this.state.phone}`,\r\n      fromCurrency:this.state.fromCurrency,\r\n      toCurrency:this.state.toCurrency,\r\n      amount:this.state.amount,\r\n    }\r\n    this.props.onSubmit(payload);\r\n  }\r\n\r\n  onSelectCode = event=>{\r\n    this.setState({code:event.code})\r\n  }\r\n\r\n  render(){\r\n    const {props:{\r\n        currencies\r\n      },\r\n      onSubmit,onSelectCode } = this;\r\n\r\n    return (\r\n      <Form  onSubmit={onSubmit}>\r\n        <div className=\"personal-div\">\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridFirstName\">\r\n              <Form.Label>First Name<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control required type=\"text\" value={this.state.firstName||''} autoComplete=\"off\" placeholder=\"First Name\" maxLength={10} isInvalid={this.state.firstNameError} onChange={this.handleChange('firstName','firstNameError','required')}/>\r\n            </Form.Group>\r\n        \r\n            <Form.Group as={Col} controlId=\"formGridLastName\">\r\n              <Form.Label>Last Name<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control required type=\"text\" value={this.state.lastName||''} autoComplete=\"off\" placeholder=\"Last Name\" maxLength={10} isInvalid={this.state.lastNameError}  onChange={this.handleChange('lastName','lastNameError','required')}/>\r\n            </Form.Group>\r\n          </Form.Row>\r\n    \r\n          <Form.Group controlId=\"formGridEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" placeholder=\"Enter email\" maxLength={50} autoComplete=\"off\"  isInvalid={this.state.invalidEmail} value={this.state.email||''} onChange={this.handleChange('email','invalidEmail')}/>\r\n          </Form.Group>\r\n      \r\n          <Form.Group controlId=\"formGridPhone\">\r\n          <Form.Label>Telephone / Mobile</Form.Label>\r\n          <InputGroup className=\"mb-3\">\r\n            <DropdownButton\r\n              as={InputGroup.Prepend}\r\n              variant=\"outline-secondary\"\r\n              title={this.state.code}\r\n              id=\"input-group-dropdown-1\"\r\n            >\r\n              {jsonPhone.code.map(option => {\r\n                return (\r\n                  <Dropdown.Item key={option['code']} onClick={e=>onSelectCode({code:option['dial_code'],name:option['name']})}>{option['dial_code']}</Dropdown.Item>\r\n                )\r\n              })}\r\n            </DropdownButton>\r\n            <FormControl autoComplete=\"off\" aria-describedby=\"basic-addon1\" maxLength={10} onChange={this.handleChange('phone','invalidPhone')} value={this.state.value} isInvalid={this.state.invalidPhone}/>\r\n          </InputGroup>\r\n          </Form.Group>\r\n        </div>\r\n        <div className=\"grey-background quote-detail\">\r\n          <Form.Row>\r\n                \r\n            <Form.Group as={Col} controlId=\"fromCurrency\" className=\"currency-input\">\r\n              <Form.Label>From Currency<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control as=\"select\" required isInvalid={this.state.invalidToCurrency} value={this.state.fromCurrency} onChange={this.handleChange('fromCurrency')}>\r\n                {Object.entries(currencies).map(option => (\r\n                  <option key={option['0']} value={option['0']}>{option['1']}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n        \r\n            <Form.Group as={Col} controlId=\"toCurrency\">\r\n              <Form.Label>To Currency<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control as=\"select\" required isInvalid={this.state.invalidToCurrency} autoComplete=\"off\" value={this.state.toCurrency} onChange={this.handleChange('toCurrency')}>\r\n                {Object.entries(currencies).map(option => (\r\n                  <option key={option['0']} value={option['0']}>{option['1']}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Group controlId=\"formGridAmount\" className=\"amount-input\">\r\n              <Form.Label>Amount<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control autoComplete=\"off\" required type=\"text\" placeholder=\"Amount\" size={10} value={this.state.amount||''} onChange={this.handleChange('amount','amountError','required')} isInvalid={this.state.amountError}/>\r\n          </Form.Group>\r\n          {this.state.isSameCurrency && <p><span className=\"error\">Conversion currency cannot be same.</span></p>}\r\n          <Button variant=\"primary\" type=\"submit\">\r\n             GET QUOTE\r\n          </Button>\r\n        </div>\r\n    </Form>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default function ResultQuote(params){\r\n    return (\r\n        <div className=\"grey-background result-quote\">\r\n            {!params.quote &&\r\n                <div className=\"result-Error\">\r\n                    Sorry currency not Supportive\r\n                </div>\r\n            }\r\n            { params.quote &&\r\n                <>\r\n                    <span className=\"ofx-rate-heading\">OFX Customer Rate</span>\r\n                    <p><span className=\"rate\">{params.quote.CustomerRate}</span></p>\r\n                    <div className=\"converted-amount\">\r\n                        <Amount \r\n                            text='From' \r\n                            currencyCode={params.fromCurrencyCode} \r\n                            currencyAmount={params.quote.CustomerAmount}/>\r\n                        <Amount \r\n                            text='To' \r\n                            currencyCode={params.toCurrencyCode} \r\n                            currencyAmount={params.quote.ComparisonAmount}/>\r\n                    </div>\r\n                    </>\r\n            }  \r\n            <Button variant=\"primary\" type=\"button\" onClick={e=>params.getNewQuote()}>\r\n                START NEW QUOTE\r\n            </Button>\r\n                \r\n        </div>\r\n    )\r\n}\r\nfunction Amount(params){\r\n    return(\r\n        <>\r\n            <span className=\"align-side\">{params.text}</span>\r\n            <p>\r\n                <span className=\"currency\">{params.currencyCode}</span>\r\n                <span className=\"amount\">{params.currencyAmount}</span>\r\n            </p>\r\n        </>\r\n    )\r\n}","const headers = {\"content-type\":\"application/json;charset=UTF-8\"};\r\n\r\nasync function getData(url,newHeaders=headers, payload={}, method='GET'){\r\n\r\n      const header = {newHeaders,method}\r\n      return await new Promise((resolve,reject)=>{\r\n        fetch(url,newHeaders)\r\n        .then(data=>{\r\n            if(!data.ok){\r\n                return null;\r\n            }\r\n            return data.json();\r\n        })\r\n        .then(data=>resolve(data))\r\n        .catch(function(error) {\r\n            console.log('Looks like there was a problem: \\n', error);\r\n            return null;\r\n        });\r\n      }).then(data=>data)      \r\n}\r\n\r\nexport function submitQuote(payload){\r\n    return getData(`https://api.ofx.com/PublicSite.ApiService/OFX/spotrate/Individual/${payload.fromCurrency}/${payload.toCurrency}/${payload.amount}?format=json`).then(data=>data);\r\n}\r\n\r\nexport function getCurrencyCode(payload){\r\n    const url = \"https://openexchangerates.org/api/currencies.json\";\r\n    return getData(url);\r\n}\r\n","import React,{ Component } from 'react';\r\nimport QuoteForm from './quoteForm';\r\nimport ResultQuote from './ResultQuote';\r\nimport {submitQuote, getCurrencyCode} from './api';\r\n\r\nconst QUOTE='quote';\r\nconst RESULT = 'result';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      currencies:[],\r\n      ...this.resetState()\r\n    }\r\n  }\r\n\r\n  resetState = params => {\r\n    return {\r\n      status:'quote',\r\n      quoteDetail:'',\r\n      quote:'',\r\n      \r\n    };\r\n  }\r\n\r\n  getNewQuote = () => {\r\n    this.setState({\r\n      ...this.resetState()\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    getCurrencyCode().then(data=>{\r\n      this.setState({\r\n        currencies:data\r\n      })\r\n    })  \r\n  }\r\n\r\n  onSubmit=params=>{\r\n    submitQuote(params).then(data=>{\r\n      this.setState({\r\n        status:RESULT,\r\n        quote:data,\r\n        ...params\r\n      })\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"main-div\">\r\n        <span className=\"heading\">Quick Quote</span>\r\n        <hr/>\r\n        {this.state.status===QUOTE && <QuoteForm \r\n          currencies={this.state.currencies} \r\n          phoneCode={this.state.phoneCode} \r\n          setSelectedCurrency={this.setSelectedCurrency}\r\n          onSubmit={this.onSubmit}\r\n          reset={this.state.toReset}/>}\r\n        {this.state.status===RESULT && <ResultQuote getNewQuote={this.getNewQuote} quote={this.state.quote} fromCurrencyCode={this.state.fromCurrency} toCurrencyCode={this.state.toCurrency}/>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}